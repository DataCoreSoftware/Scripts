#!/bin/bash

set -e

ISCSI_CONF="/etc/iscsi/iscsid.conf"
BACKUP="${ISCSI_CONF}.bak.$(date +%F_%T)"

declare -A CONFIG_OPTIONS=(
#   ["node.startup"]="automatic"
  ["node.leading_login"]="No"
  ["node.session.timeo.replacement_timeout"]="15"
  ["node.session.initial_login_retry_max"]="64"
)

usage() {
    echo "Usage: $0 [check|apply]"
    echo "  check   - Verify current settings in $ISCSI_CONF"
    echo "  apply   - Apply recommended settings to $ISCSI_CONF"
    exit 1
}

check_config() {
    echo "Checking iSCSI configuration in $ISCSI_CONF"
    all_ok=true
    for key in "${!CONFIG_OPTIONS[@]}"; do
        expected="${CONFIG_OPTIONS[$key]}"
        actual=$(grep -E "^\s*${key}\s*=" "$ISCSI_CONF" | tail -n 1 | awk -F= '{print $2}' | xargs)

        if [[ "$actual" == "$expected" ]]; then
            echo "✔ $key = $actual"
        else
            echo "✖ $key is '${actual:-NOT SET}', expected '$expected'"
            all_ok=false
        fi
    done

    if $all_ok; then
        echo -e "\n✅ All recommended settings are correctly applied."
        exit 0
    else
        echo -e "\n⚠ Some settings are missing or incorrect."
        exit 2
    fi
}

apply_config() {
    echo "Backing up current config to $BACKUP"
    cp "$ISCSI_CONF" "$BACKUP"

    echo "Applying SANsymphony recommended /etc/iscsi/iscsid.conf settings..."
    for key in "${!CONFIG_OPTIONS[@]}"; do
        value="${CONFIG_OPTIONS[$key]}"

        if grep -Eq "^[#\s]*${key}\s*=" "$ISCSI_CONF"; then
            sed -i "s|^[#\s]*${key}\s*=.*|${key} = ${value}|" "$ISCSI_CONF"
            echo "Updated $key = $value"
        else
            echo "${key} = ${value}" >> "$ISCSI_CONF"
            echo "Added $key = $value"
        fi
    done

    echo -e "\n✅ Configuration applied."
}

# Main
case "$1" in
    check)
        check_config
        ;;
    apply)
        apply_config
        ;;
    *)
        usage
        ;;
esac
